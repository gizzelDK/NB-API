// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NB_API.Models;

#nullable disable

namespace NB_API.Migrations
{
    [DbContext(typeof(NBDBContext))]
    [Migration("20220909090351_09092022")]
    partial class _09092022
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BrugerBryggeri", b =>
                {
                    b.Property<int>("FollowersId")
                        .HasColumnType("int");

                    b.Property<int>("FollowsId")
                        .HasColumnType("int");

                    b.HasKey("FollowersId", "FollowsId");

                    b.HasIndex("FollowsId");

                    b.ToTable("BrugerBryggeri");
                });

            modelBuilder.Entity("BrugerEvent", b =>
                {
                    b.Property<int>("DeltagereId")
                        .HasColumnType("int");

                    b.Property<int>("EventsId")
                        .HasColumnType("int");

                    b.HasKey("DeltagereId", "EventsId");

                    b.HasIndex("EventsId");

                    b.ToTable("BrugerEvent");
                });

            modelBuilder.Entity("BryggeriSamarbejde", b =>
                {
                    b.Property<int>("BryggerierId")
                        .HasColumnType("int");

                    b.Property<int>("SamarbejdeId")
                        .HasColumnType("int");

                    b.HasKey("BryggerierId", "SamarbejdeId");

                    b.HasIndex("SamarbejdeId");

                    b.ToTable("BryggeriSamarbejde");
                });

            modelBuilder.Entity("EventTag", b =>
                {
                    b.Property<int>("EventsId")
                        .HasColumnType("int");

                    b.Property<int>("TagsId")
                        .HasColumnType("int");

                    b.HasKey("EventsId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("EventTag");
                });

            modelBuilder.Entity("ForumTag", b =>
                {
                    b.Property<int>("ForumId")
                        .HasColumnType("int");

                    b.Property<int>("TagsId")
                        .HasColumnType("int");

                    b.HasKey("ForumId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("ForumTag");
                });

            modelBuilder.Entity("NB_API.Models.Bruger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("AcceptedPolicy")
                        .HasColumnType("bit");

                    b.Property<string>("Brugernavn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeleteTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<int?>("KontaktoplysningerId")
                        .HasColumnType("int");

                    b.Property<byte[]>("PwHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PwSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("RolleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("KontaktoplysningerId");

                    b.HasIndex("RolleId");

                    b.ToTable("Bruger");
                });

            modelBuilder.Entity("NB_API.Models.Bryggeri", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Beskrivelse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BryggeriLogo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("KontaktoplysningerId")
                        .HasColumnType("int");

                    b.Property<string>("Navn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SamarbejdeAnmodningId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("KontaktoplysningerId")
                        .IsUnique()
                        .HasFilter("[KontaktoplysningerId] IS NOT NULL");

                    b.HasIndex("SamarbejdeAnmodningId");

                    b.ToTable("Bryggeri");
                });

            modelBuilder.Entity("NB_API.Models.Certifikat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BrugerId")
                        .HasColumnType("int");

                    b.Property<int?>("CStatus")
                        .HasColumnType("int");

                    b.Property<string>("CertifikatBilled")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BrugerId");

                    b.ToTable("Certifikat");
                });

            modelBuilder.Entity("NB_API.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Beskrivelse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventBilled")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lokation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SlutDato")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDato")
                        .HasColumnType("datetime2");

                    b.Property<string>("Titel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("NB_API.Models.Forum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Beskrivelse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BrugerId")
                        .HasColumnType("int");

                    b.Property<string>("ForumBillede")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Oprettet")
                        .HasColumnType("datetime2");

                    b.Property<string>("Titel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BrugerId");

                    b.ToTable("Forum");
                });

            modelBuilder.Entity("NB_API.Models.Kommentar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("OlId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Tekst")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OlId");

                    b.ToTable("Kommentar");
                });

            modelBuilder.Entity("NB_API.Models.Kontaktoplysninger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Addresselinje1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Addresselinje2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("By")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Enavn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fnavn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Postnr")
                        .HasColumnType("int");

                    b.Property<string>("TelefonNr")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Kontaktoplysninger");
                });

            modelBuilder.Entity("NB_API.Models.Login", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BrugerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LoginTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasComputedColumnSql("getutcdate()");

                    b.HasKey("Id");

                    b.HasIndex("BrugerId");

                    b.ToTable("Login");
                });

            modelBuilder.Entity("NB_API.Models.Opskrift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("OlId")
                        .HasColumnType("int");

                    b.Property<string>("StepFive")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StepFour")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StepOne")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StepThree")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StepTwo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OlId")
                        .IsUnique();

                    b.ToTable("Opskrift");
                });

            modelBuilder.Entity("NB_API.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BrugerId")
                        .HasColumnType("int");

                    b.Property<int>("ForumId")
                        .HasColumnType("int");

                    b.Property<string>("Indhold")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Oprettet")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2");

                    b.Property<int?>("PostId")
                        .HasColumnType("int");

                    b.Property<int?>("SvarerId")
                        .HasColumnType("int");

                    b.Property<string>("Titel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BrugerId");

                    b.HasIndex("ForumId");

                    b.HasIndex("SvarerId");

                    b.ToTable("Post");
                });

            modelBuilder.Entity("NB_API.Models.Rapport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AnklagetBrugerId")
                        .HasColumnType("int");

                    b.Property<string>("Besked")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BrugerId")
                        .HasColumnType("int");

                    b.Property<bool?>("Godtaget")
                        .HasColumnType("bit");

                    b.Property<int?>("RType")
                        .HasColumnType("int");

                    b.Property<string>("Titel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BrugerId");

                    b.ToTable("Rapport");
                });

            modelBuilder.Entity("NB_API.Models.Rolle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("RolleNavn")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Rolle");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Level = 0,
                            RolleNavn = 0
                        },
                        new
                        {
                            Id = 2,
                            Level = 10,
                            RolleNavn = 10
                        },
                        new
                        {
                            Id = 3,
                            Level = 20,
                            RolleNavn = 20
                        });
                });

            modelBuilder.Entity("NB_API.Models.Samarbejde", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("OlId")
                        .HasColumnType("int");

                    b.Property<string>("Titel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OlId");

                    b.ToTable("Samarbejde");
                });

            modelBuilder.Entity("NB_API.Models.SamarbejdeAnmodning", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("SamarbejdeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SamarbejdeId");

                    b.ToTable("SamarbejdeAnmodning");
                });

            modelBuilder.Entity("NB_API.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("BryggeriId")
                        .HasColumnType("int");

                    b.Property<string>("Navn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BryggeriId");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("NB_API.Models.Øl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Aargang")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Antal")
                        .HasColumnType("int");

                    b.Property<string>("Beskrivelse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BryggeriId")
                        .HasColumnType("int");

                    b.Property<int?>("FlaskeAntal")
                        .HasColumnType("int");

                    b.Property<int?>("FlaskeResAntal")
                        .HasColumnType("int");

                    b.Property<string>("Land")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Navn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OlBillede")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Procent")
                        .HasColumnType("real");

                    b.Property<string>("Smag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TondeAntal")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BryggeriId");

                    b.ToTable("Øl");
                });

            modelBuilder.Entity("TagØl", b =>
                {
                    b.Property<int>("OlId")
                        .HasColumnType("int");

                    b.Property<int>("TagsId")
                        .HasColumnType("int");

                    b.HasKey("OlId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("TagØl");
                });

            modelBuilder.Entity("BrugerBryggeri", b =>
                {
                    b.HasOne("NB_API.Models.Bruger", null)
                        .WithMany()
                        .HasForeignKey("FollowersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NB_API.Models.Bryggeri", null)
                        .WithMany()
                        .HasForeignKey("FollowsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BrugerEvent", b =>
                {
                    b.HasOne("NB_API.Models.Bruger", null)
                        .WithMany()
                        .HasForeignKey("DeltagereId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NB_API.Models.Event", null)
                        .WithMany()
                        .HasForeignKey("EventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BryggeriSamarbejde", b =>
                {
                    b.HasOne("NB_API.Models.Bryggeri", null)
                        .WithMany()
                        .HasForeignKey("BryggerierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NB_API.Models.Samarbejde", null)
                        .WithMany()
                        .HasForeignKey("SamarbejdeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EventTag", b =>
                {
                    b.HasOne("NB_API.Models.Event", null)
                        .WithMany()
                        .HasForeignKey("EventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NB_API.Models.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ForumTag", b =>
                {
                    b.HasOne("NB_API.Models.Forum", null)
                        .WithMany()
                        .HasForeignKey("ForumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NB_API.Models.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NB_API.Models.Bruger", b =>
                {
                    b.HasOne("NB_API.Models.Kontaktoplysninger", "Kontaktoplysninger")
                        .WithMany()
                        .HasForeignKey("KontaktoplysningerId");

                    b.HasOne("NB_API.Models.Rolle", "Rolle")
                        .WithMany()
                        .HasForeignKey("RolleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kontaktoplysninger");

                    b.Navigation("Rolle");
                });

            modelBuilder.Entity("NB_API.Models.Bryggeri", b =>
                {
                    b.HasOne("NB_API.Models.Kontaktoplysninger", "Kontaktoplysninger")
                        .WithOne("Bryggeri")
                        .HasForeignKey("NB_API.Models.Bryggeri", "KontaktoplysningerId");

                    b.HasOne("NB_API.Models.SamarbejdeAnmodning", null)
                        .WithMany("Bryggerier")
                        .HasForeignKey("SamarbejdeAnmodningId");

                    b.Navigation("Kontaktoplysninger");
                });

            modelBuilder.Entity("NB_API.Models.Certifikat", b =>
                {
                    b.HasOne("NB_API.Models.Bruger", "Bruger")
                        .WithMany("Certifikats")
                        .HasForeignKey("BrugerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bruger");
                });

            modelBuilder.Entity("NB_API.Models.Forum", b =>
                {
                    b.HasOne("NB_API.Models.Bruger", "Bruger")
                        .WithMany()
                        .HasForeignKey("BrugerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bruger");
                });

            modelBuilder.Entity("NB_API.Models.Kommentar", b =>
                {
                    b.HasOne("NB_API.Models.Øl", "Ol")
                        .WithMany("Kommentarer")
                        .HasForeignKey("OlId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ol");
                });

            modelBuilder.Entity("NB_API.Models.Login", b =>
                {
                    b.HasOne("NB_API.Models.Bruger", "Bruger")
                        .WithMany()
                        .HasForeignKey("BrugerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bruger");
                });

            modelBuilder.Entity("NB_API.Models.Opskrift", b =>
                {
                    b.HasOne("NB_API.Models.Øl", "Ol")
                        .WithOne("Bryggeprocess")
                        .HasForeignKey("NB_API.Models.Opskrift", "OlId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ol");
                });

            modelBuilder.Entity("NB_API.Models.Post", b =>
                {
                    b.HasOne("NB_API.Models.Bruger", "Bruger")
                        .WithMany()
                        .HasForeignKey("BrugerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NB_API.Models.Forum", "Forum")
                        .WithMany("Posts")
                        .HasForeignKey("ForumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NB_API.Models.Post", "Svarer")
                        .WithMany()
                        .HasForeignKey("SvarerId");

                    b.Navigation("Bruger");

                    b.Navigation("Forum");

                    b.Navigation("Svarer");
                });

            modelBuilder.Entity("NB_API.Models.Rapport", b =>
                {
                    b.HasOne("NB_API.Models.Bruger", "Bruger")
                        .WithMany("Rapporter")
                        .HasForeignKey("BrugerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bruger");
                });

            modelBuilder.Entity("NB_API.Models.Samarbejde", b =>
                {
                    b.HasOne("NB_API.Models.Øl", "Ol")
                        .WithMany("Samarbejder")
                        .HasForeignKey("OlId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ol");
                });

            modelBuilder.Entity("NB_API.Models.SamarbejdeAnmodning", b =>
                {
                    b.HasOne("NB_API.Models.Samarbejde", null)
                        .WithMany("SamarbejdeAnmodning")
                        .HasForeignKey("SamarbejdeId");
                });

            modelBuilder.Entity("NB_API.Models.Tag", b =>
                {
                    b.HasOne("NB_API.Models.Bryggeri", null)
                        .WithMany("Tags")
                        .HasForeignKey("BryggeriId");
                });

            modelBuilder.Entity("NB_API.Models.Øl", b =>
                {
                    b.HasOne("NB_API.Models.Bryggeri", "Bryggeri")
                        .WithMany()
                        .HasForeignKey("BryggeriId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bryggeri");
                });

            modelBuilder.Entity("TagØl", b =>
                {
                    b.HasOne("NB_API.Models.Øl", null)
                        .WithMany()
                        .HasForeignKey("OlId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NB_API.Models.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NB_API.Models.Bruger", b =>
                {
                    b.Navigation("Certifikats");

                    b.Navigation("Rapporter");
                });

            modelBuilder.Entity("NB_API.Models.Bryggeri", b =>
                {
                    b.Navigation("Tags");
                });

            modelBuilder.Entity("NB_API.Models.Forum", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("NB_API.Models.Kontaktoplysninger", b =>
                {
                    b.Navigation("Bryggeri");
                });

            modelBuilder.Entity("NB_API.Models.Samarbejde", b =>
                {
                    b.Navigation("SamarbejdeAnmodning");
                });

            modelBuilder.Entity("NB_API.Models.SamarbejdeAnmodning", b =>
                {
                    b.Navigation("Bryggerier");
                });

            modelBuilder.Entity("NB_API.Models.Øl", b =>
                {
                    b.Navigation("Bryggeprocess");

                    b.Navigation("Kommentarer");

                    b.Navigation("Samarbejder");
                });
#pragma warning restore 612, 618
        }
    }
}
